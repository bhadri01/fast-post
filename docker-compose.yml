services:
  traefik:
    image: traefik
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.file.filename=/etc/traefik/traefik_dynamic.yml"
      - "--entrypoints.postgres.address=:5432"
      - "--entrypoints.postgres_slave.address=:5433"
      - "--entrypoints.web.address=:80"      # PostgreSQL entry point
      - "--entrypoints.amqp.address=:5671"          # RabbitMQ AMQP entry point
      - "--entrypoints.metrics.address=:9100"       # Metrics entry point for Prometheus
      - "--metrics.prometheus=true"                 # Enable Prometheus metrics
      - "--metrics.prometheus.entryPoint=metrics"   # Use the defined metrics entry point
      - "--log.level=DEBUG"
    ports:
      - "8080:8080"
      - "80:80"
    networks:
      pg-cluster-net:
        aliases:
          - "master.db"
          - "slave.db"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik_dynamic.yml:/etc/traefik/traefik_dynamic.yml:ro 
    restart: always
    labels:
      - "traefik.enable=false" 

  master-db:
    build:
      context: ./masterdb
      dockerfile: Dockerfile
    container_name: master-db
    # depends_on:
    #   - traefik
    volumes:
      - master_data:/var/lib/postgresql/data
    networks:
      - pg-cluster-net
    labels:
    - "traefik.tcp.routers.master-db.rule=HostSNI(`*`)"
    - "traefik.tcp.routers.master-db.entrypoints=postgres"
    - "traefik.tcp.routers.master-db.service=master-db"
    - "traefik.tcp.routers.master-db.tls=false"
    - "traefik.tcp.services.master-db.loadbalancer.server.port=5432"
    restart: always  # Add this line to restart on failure


  slave-db:
    build:
      context: ./slavedb
      dockerfile: Dockerfile
    container_name: slave-db
    # depends_on:
    #   - master-db
    #   - adminer
    networks:
      - pg-cluster-net
    labels:
    - "traefik.tcp.routers.slave-db.rule=HostSNI(`*`)"
    - "traefik.tcp.routers.slave-db.entrypoints=postgres_slave"
    - "traefik.tcp.routers.slave-db.service=slave-db"
    - "traefik.tcp.routers.slave-db.tls=false"
    - "traefik.tcp.services.slave-db.loadbalancer.server.port=5433"
    restart: always  # Add this line to restart on failure

  slave-db-2:
    image: fast-post-slave-db:latest
    container_name: slave-db-2
    # depends_on:
    #   - master-db
    #   - adminer
    #   - slave-db
    networks:
      - pg-cluster-net
    labels:
    - "traefik.tcp.routers.slave-db.rule=HostSNI(`*`)"
    - "traefik.tcp.routers.slave-db.entrypoints=postgres_slave"
    - "traefik.tcp.routers.slave-db.service=slave-db"
    - "traefik.tcp.routers.slave-db.tls=false"
    - "traefik.tcp.services.slave-db.loadbalancer.server.port=5433"
    restart: always  # Add this line to restart on failure

  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: backend
  #   hostname: backend
  #   # depends_on:
  #   #   - traefik
  #   #   - slave-db
  #   #   - slave-db-2
  #   networks:
  #     - pg-cluster-net
  #   restart: always 
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   labels:
  #       - "traefik.enable=true"
  #       - "traefik.http.routers.nginx.rule=Host(`nginx.example.in`)"
  #       - "traefik.http.services.nginx.loadbalancer.server.port=8000"
  #       - "traefik.http.routers.nginx.entrypoints=web" 

  strapi:
    image: registry.gitlab.com/succeedex/backend-crm-strapi/cms-strapi:latest
    container_name: "strapi"
    restart: always
    hostname: strapi
    env_file:
      - .env
    volumes:
      - /home/black/.ssh:/home/node/.ssh
    networks:
      - pg-cluster-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.strapi.rule=Host(`strapi.example.in`)"
      - "traefik.http.services.strapi.loadbalancer.server.port=8000"
      - "traefik.http.routers.strapi.entrypoints=web" 

  adminer:
    container_name: "adminer"
    image: adminer:latest
    hostname: "adminer"
    # depends_on:
    #   - master-db
    restart: always
    environment:
      ADMINER_DESIGN: 'dracula'
      ADMINER_DEFAULT_SERVER: 'master-db'
    networks:
      - pg-cluster-net 
    labels:
      - "traefik.enable=false"

volumes:
  master_data:
  slave_data:

networks:
  pg-cluster-net:
    driver: bridge
